import * as fs from 'fs';
import * as path from 'path';
import * as zlib from 'zlib';
import * as tar from 'tar';
import * as chalk from 'chalk';

import { runcmd, getCommandInfo, fsReadJsonFile, fsWriteJsonFile, ERROR_FILE_NOT_FOUND, ERROR_FILE_INVALID_JSON } from '@ionic/cli-utils';
import { StarterTemplate } from '../definitions';

/**
 * Spawn an npm install task from within
 */
export async function pkgInstallProject(installer: string, root: string): Promise<any> {
  try {
    await runcmd(installer, ['install'], {cwd: root, stdio: 'ignore'});
  } catch (e) {
    throw `${installer} install failed`;
  }
}

/**
 *
 */
export function tarXvf(readStream: NodeJS.ReadableStream, destination: string): Promise<any> {
  return new Promise((resolve, reject) => {
    const baseArchiveExtract = tar.Extract({
        path: destination,
        strip: 1
      })
      .on('error', reject)
      .on('end', resolve);
    try {
      readStream
        .pipe(zlib.createUnzip())
        .on('error', reject)
        .pipe(baseArchiveExtract);
    } catch (e) {
      reject(e);
    }
  });
}

/**
 *
 */
export function isProjectNameValid(name: string): boolean {
  return name !== '.';
}

/**
 * If project only contains files generated by GH, it’s safe.
 * We also special case IJ-based products .idea because it integrates with CRA:
 * https://github.com/facebookincubator/create-react-app/pull/368#issuecomment-243446094
 */
export function isSafeToCreateProjectIn(root: string): boolean {
  var validFiles = [
    '.DS_Store', 'Thumbs.db', '.git', '.gitignore', '.idea', 'README.md', 'LICENSE'
  ];
  return fs.readdirSync(root)
    .every(function(file) {
      return validFiles.indexOf(file) >= 0;
    });
}

/**
 *
 */
export function getStarterTemplateText(templateList: StarterTemplate[]): string {
  let headerLine = chalk.bold(`Ionic Starter templates`);
  let formattedTemplateList = getStarterTemplateTextList(templateList);


  return `
    ${headerLine}
      ${formattedTemplateList.join(`
      `)}
  `;
}

export function getStarterTemplateTextList(templateList: StarterTemplate[]): string[] {

  return templateList.map(({ name, description }) => {
    let templateName = chalk.green(name);

    return `${templateName} ${Array(20 - name.length).join('.')} ${description}`;
  });
}

/**
 *
 */
export function getHelloText(): string {
  return `
${chalk.bold('♬ ♫ ♬ ♫  Your Ionic app is ready to go! ♬ ♫ ♬ ♫')}

${chalk.bold('Some helpful tips:')}

${chalk.bold('Run your app in the browser (great for initial development):')}
  ionic serve

${chalk.bold('Run on a device or simulator:')}
  ionic cordova:run ios[android,browser]

${chalk.bold('Test and share your app on a device with the Ionic View app:')}
  http://view.ionic.io
  `;
}

export async function updateDependenciesForCLI(pathToProject: string, releaseChannelName: string = 'latest') {
  const filePath = path.resolve(pathToProject, 'package.json');
  try {
    let [jsonStructure, distTags ] = await Promise.all([
      fsReadJsonFile(filePath),
      getCommandInfo('npm', ['view', '@ionic/cli-plugin-core', 'dist-tags', '--json'])
    ]);
    jsonStructure['devDependencies']['@ionic/cli-plugin-core'] = JSON.parse(distTags)[releaseChannelName];

    // TODO: eventually update ionic2-app-base and remove this.
    jsonStructure['devDependencies']['@ionic/app-scripts'] = '1.0.1';

    await fsWriteJsonFile(filePath, jsonStructure, { encoding: 'utf8' });

  } catch (e) {
    if (e === ERROR_FILE_NOT_FOUND) {
      throw new Error(`${filePath} not found`);
    } else if (e === ERROR_FILE_INVALID_JSON) {
      throw new Error(`${filePath} is not valid JSON.`);
    }
    throw e;
  }
}
